---
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>Acceso Agenda · Antonio Rey</title>
		<style>
			:root {
				color-scheme: light;
				--bg: #faf9f7;
				--surface: #ffffff;
				--border: #e1dfdc;
				--text: #1e1c1a;
				--muted: #6d6a67;
				--accent: #b1212b;
				--accent-dark: #7f181f;
				--shadow: 0 12px 30px rgba(20, 18, 16, 0.08);
				--radius: 14px;
				font-family: "Helvetica Neue", "Segoe UI", system-ui, sans-serif;
			}

			* {
				box-sizing: border-box;
			}

			body {
				margin: 0;
				background: var(--bg);
				color: var(--text);
				min-height: 100vh;
				display: flex;
				align-items: center;
				justify-content: center;
				padding: clamp(2rem, 4vw, 3rem) 1.5rem;
			}

			main {
				width: min(420px, 100%);
				background: var(--surface);
				border-radius: var(--radius);
				box-shadow: var(--shadow);
				padding: clamp(1.6rem, 4vw, 2.4rem);
				display: flex;
				flex-direction: column;
				gap: 1.6rem;
				transition: width 180ms ease, padding 180ms ease;
			}

			main[data-mode="dashboard"] {
				width: min(960px, 100%);
				padding: clamp(2rem, 5vw, 3.5rem);
				gap: 2rem;
			}

			h1 {
				margin: 0;
				font-size: clamp(1.6rem, 3.5vw, 2.2rem);
				letter-spacing: 0.02em;
			}

			p {
				margin: 0;
			}

			.section {
				display: grid;
				gap: 1.2rem;
			}

			form {
				display: grid;
				gap: 1rem;
			}

		label {
			font-size: 0.9rem;
		}

		label.field-group {
			display: flex;
			flex-direction: column;
			gap: 0.55rem;
			padding: 0.9rem 1rem;
			border-radius: 14px;
			border: 1px solid rgba(30, 28, 26, 0.12);
			background: linear-gradient(180deg, rgba(255, 255, 255, 0.95), rgba(250, 249, 247, 0.9));
			box-shadow: 0 12px 24px rgba(20, 18, 16, 0.05);
			transition: border-color 160ms ease, box-shadow 160ms ease, background 160ms ease;
		}

		label.field-group:focus-within {
			border-color: rgba(177, 33, 43, 0.4);
			box-shadow: 0 0 0 3px rgba(177, 33, 43, 0.16), 0 14px 26px rgba(20, 18, 16, 0.08);
			background: #fffdfc;
		}

		label.field-group > span.field-label {
			font-size: 0.72rem;
			text-transform: uppercase;
			letter-spacing: 0.14em;
			font-weight: 600;
			color: var(--muted);
		}

		label.field-group input,
		label.field-group textarea {
			width: 100%;
			padding: 0;
			border: none;
			background: transparent;
			font-size: 0.96rem;
			line-height: 1.6;
			color: var(--text);
			outline: none;
		}

		label.field-group input::placeholder,
		label.field-group textarea::placeholder {
			color: rgba(109, 106, 103, 0.7);
		}

		label.field-group input:focus,
		label.field-group textarea:focus {
			outline: none;
		}

		label.field-group textarea {
			min-height: 150px;
			max-height: 260px;
			resize: vertical;
			scrollbar-width: thin;
		}

		input[type="date"],
		input[type="time"] {
			font-variant-numeric: tabular-nums;
		}

		button {
			border: none;
			border-radius: 12px;
			padding: 0.78rem 1.8rem;
			font-weight: 600;
			font-size: 0.95rem;
			cursor: pointer;
			transition: transform 120ms ease, box-shadow 120ms ease, background 160ms ease;
		}

		button.primary {
			background: linear-gradient(135deg, var(--accent), #d43c45);
			color: #fff;
			box-shadow: 0 14px 28px rgba(177, 33, 43, 0.28);
		}

		button.primary:hover {
			transform: translateY(-1px);
			box-shadow: 0 18px 34px rgba(177, 33, 43, 0.34);
		}

		button.secondary {
			background: rgba(245, 244, 243, 0.9);
			color: var(--text);
			border: 1px solid var(--border);
		}

		button.secondary:hover {
			transform: translateY(-1px);
			box-shadow: 0 12px 22px rgba(20, 18, 16, 0.12);
		}

			#logout-button {
				padding-inline: 1.4rem;
			}

			#logout-button:hover {
				transform: translateY(-1px);
				box-shadow: 0 10px 20px rgba(20, 18, 16, 0.12);
			}

			.message {
				border-radius: 10px;
				padding: 0.9rem 1.1rem;
				font-size: 0.92rem;
			}

			.message.info {
				background: #f7f6f4;
				color: var(--muted);
				border: 1px solid var(--border);
			}

			.message.success {
				background: #edf7f1;
				border: 1px solid #daf0e3;
				color: #1c7c45;
			}

			.message.error {
				background: #fcecec;
				border: 1px solid #f5d2d5;
				color: #972028;
			}

			.event-toolbar {
				display: flex;
				align-items: center;
				justify-content: space-between;
				gap: 1rem;
				flex-wrap: wrap;
			}

		.event-toolbar span {
			color: var(--muted);
			font-size: 0.9rem;
		}

		.events-grid {
			display: block;
		}

		.event-block {
			border: 1px solid rgba(30, 28, 26, 0.08);
			border-radius: 20px;
			padding: 1.7rem 1.9rem;
			display: grid;
			gap: 1.4rem;
			background: linear-gradient(180deg, rgba(255, 255, 255, 0.98), rgba(250, 249, 247, 0.9));
			box-shadow: 0 24px 42px rgba(20, 18, 16, 0.08);
		}

			.event-block-note {
				margin: 0;
			}

			.event-block-header {
				display: flex;
				align-items: flex-start;
				justify-content: space-between;
				gap: 1.2rem;
				flex-wrap: wrap;
			}

			.event-block-header h3,
			.event-block-header h2 {
				margin: 0;
				font-size: 1.1rem;
			}

			.event-block-meta {
				margin: 0.4rem 0 0;
				color: var(--muted);
				font-size: 0.86rem;
				letter-spacing: 0.02em;
			}

			.event-block-chip {
				padding: 0.4rem 0.85rem;
				border-radius: 999px;
				background: rgba(177, 33, 43, 0.12);
				color: var(--accent-dark);
				font-size: 0.72rem;
				font-weight: 700;
				letter-spacing: 0.14em;
				text-transform: uppercase;
				white-space: nowrap;
			}

			.event-block-actions {
				display: flex;
				justify-content: flex-end;
				gap: 0.8rem;
				flex-wrap: wrap;
			}

			.event-block-actions .primary {
				min-width: 140px;
			}

		.event-fields {
			display: grid;
			gap: 1.2rem;
			grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
		}

		.field-group.field-group--full {
			grid-column: 1 / -1;
		}

			@media (max-width: 640px) {
				main {
					padding: 1.8rem 1.4rem;
				}

				.event-fields {
					grid-template-columns: 1fr;
				}
			}
		</style>
	</head>
	<body>
		<main data-mode="login">
			<header>
				<h1>Panel de Gestión</h1>
				<p>Acceso interno para actualizar la agenda</p>
			</header>

			<section id="status-container" class="message info" role="status" aria-live="polite">
				Indica tus credenciales para empezar.
			</section>

			<section id="login-section" class="section">
				<form id="login-form" autocomplete="off">
					<label class="field-group">
						<span class="field-label">Usuario</span>
						<input name="username" type="text" required />
					</label>
					<label class="field-group">
						<span class="field-label">Contraseña</span>
						<input name="password" type="password" required />
					</label>
					<div>
						<button class="primary" type="submit">Acceder</button>
					</div>
				</form>
			</section>

			<template id="dashboard-template">
				<section class="section" data-dashboard hidden>
					<div class="event-toolbar">
						<span>Sesión iniciada. Gestiona la agenda en tiempo real.</span>
						<button class="secondary" id="logout-button" type="button">Cerrar sesión</button>
					</div>
					<form id="event-form" class="event-block">
						<div class="message info event-block-note">
							Completa los campos para añadir un nuevo evento a la agenda.
						</div>
						<div class="event-fields">
							<label class="field-group">
								<span class="field-label">Título *</span>
								<input name="title" type="text" required />
							</label>
							<label class="field-group">
								<span class="field-label">Fecha *</span>
								<input name="date" type="date" required />
							</label>
							<label class="field-group">
								<span class="field-label">Hora</span>
								<input name="time" type="time" />
							</label>
							<label class="field-group">
								<span class="field-label">Ubicación</span>
								<input name="location" type="text" />
							</label>
							<label class="field-group field-group--full">
								<span class="field-label">Imagen destacada (URL)</span>
								<input name="image" type="url" placeholder="https://..." />
							</label>
							<label class="field-group field-group--full">
								<span class="field-label">Descripción</span>
								<textarea name="description"></textarea>
							</label>
							<label class="field-group field-group--full">
								<span class="field-label">Galería (una URL por línea)</span>
								<textarea name="gallery" placeholder="https://..."></textarea>
							</label>
						</div>
						<div class="event-block-actions">
							<button class="primary" type="submit">Añadir evento</button>
						</div>
					</form>

			<div class="events-grid" id="events-list"></div>
				</section>
			</template>

			<div id="dashboard-container"></div>
		</main>

		<script type="module">
			const mainElement = document.querySelector("main");
			const loginSection = document.querySelector("#login-section");
			const loginForm = document.querySelector("#login-form");
			const statusBox = document.querySelector("#status-container");
			const dashboardContainer = document.querySelector("#dashboard-container");
			const dashboardTemplate = document.querySelector("#dashboard-template");

			let authToken = "";
			let events = [];
			let dashboardSection = null;
			let eventForm = null;
			let eventsList = null;
			let logoutButton = null;

			const setStatus = (message, variant = "info") => {
				statusBox.textContent = message;
				statusBox.className = `message ${variant}`;
			};

			const parseGalleryInput = (value) => {
				if (!value) return [];
				return value
					.split(/[\n,]/)
					.map((item) => item.trim())
					.filter((item) => item.length > 0);
			};

			const escapeHtml = (value) =>
				String(value ?? "")
					.replace(/&/g, "&amp;")
					.replace(/</g, "&lt;")
					.replace(/>/g, "&gt;")
					.replace(/"/g, "&quot;")
					.replace(/'/g, "&#039;");

			const clearEventsView = () => {
				events = [];
				if (eventsList) {
					eventsList.innerHTML = '<div class="message info">No hay eventos registrados todavía.</div>';
				}
			};

			const mountDashboard = () => {
				if (dashboardSection) return;
				const fragment = dashboardTemplate.content.cloneNode(true);
				dashboardContainer.appendChild(fragment);
				dashboardSection = dashboardContainer.querySelector("[data-dashboard]");
				eventForm = dashboardContainer.querySelector("#event-form");
				eventsList = dashboardContainer.querySelector("#events-list");
				logoutButton = dashboardContainer.querySelector("#logout-button");

				eventForm?.addEventListener("submit", handleEventFormSubmit);
				eventsList?.addEventListener("click", handleEventsListClick);
				logoutButton?.addEventListener("click", handleLogoutClick);

				if (dashboardSection) {
					dashboardSection.hidden = false;
				}
				clearEventsView();
			};

			const unmountDashboard = () => {
				dashboardContainer.innerHTML = "";
				dashboardSection = null;
				eventForm = null;
				eventsList = null;
				logoutButton = null;
			};

			const toggleView = (loggedIn, options = {}) => {
				const { message, variant = "info", resetForm = !loggedIn } = options;

				if (loggedIn) {
					mountDashboard();
					mainElement?.setAttribute("data-mode", "dashboard");
					if (dashboardSection) {
						dashboardSection.hidden = false;
					}
					loginSection.hidden = true;
					if (message) {
						setStatus(message, variant);
					} else {
						setStatus("Sesión verificada. Gestiona la agenda.", "success");
					}
				} else {
					mainElement?.setAttribute("data-mode", "login");
					if (resetForm) {
						loginForm?.reset();
					}
					loginSection.hidden = false;
					clearEventsView();
					unmountDashboard();
					setStatus(message ?? "Indica tus credenciales para empezar.", variant);
				}
			};

			const setAuthToken = (token) => {
				authToken = token;
			};

			const requestHeaders = () => {
				const headers = { "Content-Type": "application/json" };
				if (authToken) {
					headers.Authorization = `Bearer ${authToken}`;
				}
				return headers;
			};

			const handleEventFormSubmit = (event) => {
				event.preventDefault();
				const formData = new FormData(event.currentTarget);
				const image = formData.get("image")?.toString().trim();
				const galleryInput = parseGalleryInput(formData.get("gallery")?.toString() ?? "");

				const payload = {
					title: formData.get("title")?.toString().trim(),
					date: formData.get("date")?.toString().trim(),
					time: formData.get("time")?.toString().trim(),
					location: formData.get("location")?.toString().trim(),
					description: formData.get("description")?.toString().trim(),
					image: image || undefined,
					gallery: galleryInput.length ? galleryInput : undefined,
				};

				if (!payload.title || !payload.date) {
					setStatus("Título y fecha son obligatorios.", "error");
					return;
				}

				createEvent(payload).then(() => {
					event.currentTarget.reset();
				});
			};

			const handleEventsListClick = (event) => {
				const target = event.target;
				if (!(target instanceof HTMLElement)) return;
				const action = target.dataset.action;
				if (!action) return;

				const card = target.closest("[data-id]");
				if (!card) return;
				const id = card.dataset.id;
				if (!id) return;

				if (action === "delete") {
					if (confirm("¿Seguro que quieres eliminar este evento?")) {
						deleteEvent(id);
					}
					return;
				}

				if (action === "save") {
					const payload = {
						title: card.querySelector('input[name="title"]')?.value.trim(),
						date: card.querySelector('input[name="date"]')?.value.trim(),
						time: card.querySelector('input[name="time"]')?.value.trim(),
						location: card.querySelector('input[name="location"]')?.value.trim(),
						description: card.querySelector('textarea[name="description"]')?.value.trim(),
						image: card.querySelector('input[name="image"]')?.value.trim() ?? "",
						gallery: parseGalleryInput(card.querySelector('textarea[name="gallery"]')?.value ?? ""),
					};

					if (!payload.title || !payload.date) {
						setStatus("Título y fecha son obligatorios para guardar.", "error");
						return;
					}

					updateEvent(id, payload);
				}
			};

			const handleLogoutClick = () => {
				forceLogout("Sesión cerrada. Puedes iniciar sesión de nuevo cuando quieras.", "success", {
					resetForm: true,
				});
			};

			const renderEvents = () => {
				if (!eventsList) return;

				if (!events.length) {
					eventsList.innerHTML = '<div class="message info">No hay eventos registrados todavía.</div>';
					return;
				}

		const markup = events
			.map((event) => {
				const galleryValue = Array.isArray(event.gallery) ? event.gallery.join("\n") : "";
				const subtitle = formatEventSubtitle(event) || "Sin información de fecha";
				const chipLabel = event.id ? `ID: ${event.id}` : "Sin identificador";
				return `
					<article class="event-block" data-id="${escapeHtml(event.id)}">
						<div class="event-block-header">
							<div>
								<h3>${escapeHtml(event.title)}</h3>
								<p class="event-block-meta">${escapeHtml(subtitle)}</p>
							</div>
							<span class="event-block-chip">${escapeHtml(chipLabel)}</span>
						</div>
						<div class="event-fields">
							<label class="field-group">
								<span class="field-label">Título</span>
								<input name="title" type="text" value="${escapeHtml(event.title ?? "")}" />
							</label>
							<label class="field-group">
								<span class="field-label">Fecha</span>
								<input name="date" type="date" value="${escapeHtml(event.date ?? "")}" />
							</label>
							<label class="field-group">
								<span class="field-label">Hora</span>
								<input name="time" type="time" value="${escapeHtml(event.time ?? "")}" />
							</label>
							<label class="field-group">
								<span class="field-label">Ubicación</span>
								<input name="location" type="text" value="${escapeHtml(event.location ?? "")}" />
							</label>
							<label class="field-group field-group--full">
								<span class="field-label">Imagen destacada (URL)</span>
								<input name="image" type="url" value="${escapeHtml(event.image ?? "")}" />
							</label>
							<label class="field-group field-group--full">
								<span class="field-label">Descripción</span>
								<textarea name="description">${escapeHtml(event.description ?? "")}</textarea>
							</label>
							<label class="field-group field-group--full">
								<span class="field-label">Galería (una URL por línea)</span>
								<textarea name="gallery">${escapeHtml(galleryValue)}</textarea>
							</label>
						</div>
						<div class="event-block-actions">
							<button class="primary" type="button" data-action="save">Guardar</button>
							<button class="secondary" type="button" data-action="delete">Eliminar</button>
						</div>
					</article>
				`;
			})
			.join("");

				eventsList.innerHTML = markup;
			};

			const loadEvents = async () => {
				if (!dashboardSection) return;

				try {
					const response = await fetch("/api/agenda");
					if (!response.ok) {
						throw new Error("No se pudo cargar la agenda.");
					}

					events = await response.json();
					renderEvents();
					setStatus("Agenda cargada correctamente.", "success");
				} catch (error) {
					console.error(error);
					setStatus("No se pudo cargar la agenda. Revisa tu conexión.", "error");
				}
			};

			const login = async (credentials) => {
				try {
					const response = await fetch("/api/login", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(credentials),
					});
					const payload = await response.json();

					if (!response.ok) {
						throw new Error(payload?.error || "Acceso denegado.");
					}

					setAuthToken(payload.token);
					toggleView(true, {
						message: `Acceso concedido${payload?.username ? ` (${payload.username})` : ""}. Cargando agenda…`,
						variant: "success",
					});
					await loadEvents();
				} catch (error) {
					setAuthToken("");
					toggleView(false, {
						message: error.message || "Acceso denegado.",
						variant: "error",
						resetForm: false,
					});
				}
			};

			const createEvent = async (data) => {
				try {
					const response = await fetch("/api/agenda", {
						method: "POST",
						headers: requestHeaders(),
						body: JSON.stringify(data),
					});
					if (response.status === 401) {
						forceLogout();
						return;
					}
					const payload = await response.json();
					if (!response.ok) {
						throw new Error(payload?.error || "No se pudo crear el evento.");
					}

					events.push(payload);
					events.sort((a, b) => a.date.localeCompare(b.date));
					renderEvents();
					setStatus("Evento creado correctamente.", "success");
				} catch (error) {
					setStatus(error.message || "No se pudo crear el evento.", "error");
				}
			};

			const updateEvent = async (id, data) => {
				try {
					const response = await fetch(`/api/agenda/${encodeURIComponent(id)}`, {
						method: "PUT",
						headers: requestHeaders(),
						body: JSON.stringify(data),
					});
					if (response.status === 401) {
						forceLogout();
						return;
					}
					const payload = await response.json();
					if (!response.ok) {
						throw new Error(payload?.error || "No se pudo actualizar el evento.");
					}

					const index = events.findIndex((event) => event.id === id);
					if (index !== -1) {
						events[index] = payload;
						events.sort((a, b) => a.date.localeCompare(b.date));
						renderEvents();
					}
					setStatus("Evento actualizado.", "success");
				} catch (error) {
					setStatus(error.message || "No se pudo actualizar el evento.", "error");
				}
			};

			const deleteEvent = async (id) => {
				try {
					const response = await fetch(`/api/agenda/${encodeURIComponent(id)}`, {
						method: "DELETE",
						headers: requestHeaders(),
					});
					if (response.status === 401) {
						forceLogout();
						return;
					}
					if (!response.ok && response.status !== 204) {
						let payload;
						try {
							payload = await response.json();
						} catch {
							// ignore parse errors for unexpected statuses
						}
						throw new Error(payload?.error || "No se pudo eliminar el evento.");
					}

					events = events.filter((event) => event.id !== id);
					renderEvents();
					setStatus("Evento eliminado.", "success");
				} catch (error) {
					setStatus(error.message || "No se pudo eliminar el evento.", "error");
				}
			};

		const forceLogout = (message = "La sesión ha expirado. Vuelve a iniciar sesión.", variant = "error", options = {}) => {
			setAuthToken("");
			events = [];
			toggleView(false, { message, variant, ...options });
		};

		const formatDateLabel = (value) => {
			if (!value) return "";
			const [year, month, day] = value.split("-").map(Number);
			if (!year || !month || !day) return value;
			const date = new Date(year, month - 1, day);
			if (Number.isNaN(date.getTime())) return value;
			return date
				.toLocaleDateString("es-ES", {
					weekday: "short",
					day: "2-digit",
					month: "short",
					year: "numeric",
				})
				.replace(/\.$/, "");
		};

		const formatTimeLabel = (value) => {
			const trimmed = value?.trim() ?? "";
			return trimmed ? trimmed.slice(0, 5) : "";
		};

		const formatEventSubtitle = (event) => {
			const parts = [];
			const dateLabel = formatDateLabel(event.date);
			if (dateLabel) parts.push(dateLabel);
			const timeLabel = formatTimeLabel(event.time);
			if (timeLabel) parts.push(timeLabel);
			const locationLabel = event.location?.trim();
			if (locationLabel) parts.push(locationLabel);
			return parts.join(" · ");
		};

			loginForm?.addEventListener("submit", (event) => {
				event.preventDefault();
				const formData = new FormData(loginForm);
				const username = formData.get("username")?.toString().trim();
				const password = formData.get("password")?.toString().trim();

				if (!username || !password) {
					setStatus("Indica usuario y contraseña.", "error");
					return;
				}

				setStatus("Validando credenciales…", "info");
				login({ username, password });
			});

			toggleView(false, { resetForm: false });
		</script>
	</body>
</html>
